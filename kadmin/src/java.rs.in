use jni_sys::*;

use super::{TlData, TlDataEntry};

// foreign_typemap!(
//     ($p:r_type) Vec<u8> => jbyteArray {
//         let slice = &($p)[..];
//         let slice = unsafe { std::mem::transmute::<&[u8], &[i16]>(slice) };
//         let raw = JavaByteArray::from_slice_to_raw(slice, env);
//         $out = raw;
//     };
//     ($p:f_type) => "jbyteArray";
//     ($p:r_type) Vec<u8> <= jbyteArray {
//         let arr = JavaByteArray::new(env, $p);
//         let slice = arr.to_slice();
//         let slice = unsafe { std::mem::transmute::<&[i16], &[u8]>(slice) };
//         $out = slice.to_vec();
//     };
//     ($p:f_type) <= "jbyteArray";
// );

foreign_class!(class TlDataEntry {
    self_type TlDataEntry;
    constructor TlDataEntry::new(_: i16 /* , _: Vec<u8> */) -> TlDataEntry;
});
